{"ast":null,"code":"var _jsxFileName = \"/Users/amoako/Documents/Tuts/Courses/TypeScript/TypeScript Complete Course - Beginner To Advanced + Project 2022/14. Front-end And Backend Integration/project/src/context/TaskStatusChangedContext/TaskStatusChangedContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskStatusChangedContext = /*#__PURE__*/createContext({\n  updated: false,\n  toggle: () => {}\n});\nexport const TaskStatusChangedContextProvider = props => {\n  _s();\n  const [updated, setUpdated] = useState(false);\n  function toggleHandler() {\n    updated ? setUpdated(false) : setUpdated(true);\n  }\n  return /*#__PURE__*/_jsxDEV(TaskStatusChangedContext.Provider, {\n    value: {\n      updated: updated,\n      toggle: toggleHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskStatusChangedContextProvider, \"pjG7K5oPhWzCY/iFyMNiH3SMaG0=\");\n_c = TaskStatusChangedContextProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskStatusChangedContextProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","TaskStatusChangedContext","updated","toggle","TaskStatusChangedContextProvider","props","_s","setUpdated","toggleHandler","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amoako/Documents/Tuts/Courses/TypeScript/TypeScript Complete Course - Beginner To Advanced + Project 2022/14. Front-end And Backend Integration/project/src/context/TaskStatusChangedContext/TaskStatusChangedContext.tsx"],"sourcesContent":["import React, {\n  FC,\n  PropsWithChildren,\n  ReactElement,\n  createContext,\n  useState,\n} from 'react';\n\nexport const TaskStatusChangedContext = createContext({\n  updated: false,\n  toggle: () => {},\n});\n\nexport const TaskStatusChangedContextProvider: FC<\n  PropsWithChildren\n> = (props): ReactElement => {\n  const [updated, setUpdated] = useState(false);\n\n  function toggleHandler() {\n    updated ? setUpdated(false) : setUpdated(true);\n  }\n\n  return (\n    <TaskStatusChangedContext.Provider\n      value={{\n        updated: updated,\n        toggle: toggleHandler,\n      }}\n    >\n      {props.children}\n    </TaskStatusChangedContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAIVC,aAAa,EACbC,QAAQ,QACH,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEf,OAAO,MAAMC,wBAAwB,gBAAGJ,aAAa,CAAC;EACpDK,OAAO,EAAE,KAAK;EACdC,MAAM,EAAEA,CAAA,KAAM,CAAC;AACjB,CAAC,CAAC;AAEF,OAAO,MAAMC,gCAEZ,GAAIC,KAAK,IAAmB;EAAAC,EAAA;EAC3B,MAAM,CAACJ,OAAO,EAAEK,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7C,SAASU,aAAaA,CAAA,EAAG;IACvBN,OAAO,GAAGK,UAAU,CAAC,KAAK,CAAC,GAAGA,UAAU,CAAC,IAAI,CAAC;EAChD;EAEA,oBACEP,OAAA,CAACC,wBAAwB,CAACQ,QAAQ;IAChCC,KAAK,EAAE;MACLR,OAAO,EAAEA,OAAO;MAChBC,MAAM,EAAEK;IACV,CAAE;IAAAG,QAAA,EAEDN,KAAK,CAACM;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAExC,CAAC;AAACT,EAAA,CAnBWF,gCAEZ;AAAAY,EAAA,GAFYZ,gCAEZ;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}