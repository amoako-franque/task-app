{"ast":null,"code":"var _jsxFileName = \"/Users/amoako/Desktop/task-app/task-app/client/src/components/task/_taskHeader.tsx\";\nimport { Box, Chip, Typography } from '@mui/material';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { format } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskHeader = props => {\n  // Destructure props\n  const {\n    title = 'Default Title',\n    date = new Date()\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"space-between\",\n    mb: 3,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Chip, {\n        variant: \"outlined\",\n        label: format(date, 'PPP')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = TaskHeader;\nTaskHeader.propTypes = {\n  title: PropTypes.string,\n  date: PropTypes.instanceOf(Date)\n};\nvar _c;\n$RefreshReg$(_c, \"TaskHeader\");","map":{"version":3,"names":["Box","Chip","Typography","React","PropTypes","format","jsxDEV","_jsxDEV","TaskHeader","props","title","date","Date","display","width","justifyContent","mb","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","label","_c","propTypes","string","instanceOf","$RefreshReg$"],"sources":["/Users/amoako/Desktop/task-app/task-app/client/src/components/task/_taskHeader.tsx"],"sourcesContent":["import { Box, Chip, Typography } from '@mui/material';\nimport React, { FC, ReactElement } from 'react';\n\nimport { ITaskHeader } from './interfaces/ITaskHeader';\nimport PropTypes from 'prop-types';\nimport { format } from 'date-fns';\n\nexport const TaskHeader: FC<ITaskHeader> = (\n  props,\n): ReactElement => {\n  // Destructure props\n  const { title = 'Default Title', date = new Date() } =\n    props;\n\n  return (\n    <Box\n      display=\"flex\"\n      width=\"100%\"\n      justifyContent=\"space-between\"\n      mb={3}\n    >\n      <Box>\n        <Typography variant=\"h6\">{title}</Typography>\n      </Box>\n      <Box>\n        <Chip\n          variant=\"outlined\"\n          label={format(date, 'PPP')}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nTaskHeader.propTypes = {\n  title: PropTypes.string,\n  date: PropTypes.instanceOf(Date),\n};\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,UAAU,QAAQ,eAAe;AACrD,OAAOC,KAAK,MAA4B,OAAO;AAG/C,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,OAAO,MAAMC,UAA2B,GACtCC,KAAK,IACY;EACjB;EACA,MAAM;IAAEC,KAAK,GAAG,eAAe;IAAEC,IAAI,GAAG,IAAIC,IAAI,CAAC;EAAE,CAAC,GAClDH,KAAK;EAEP,oBACEF,OAAA,CAACP,GAAG;IACFa,OAAO,EAAC,MAAM;IACdC,KAAK,EAAC,MAAM;IACZC,cAAc,EAAC,eAAe;IAC9BC,EAAE,EAAE,CAAE;IAAAC,QAAA,gBAENV,OAAA,CAACP,GAAG;MAAAiB,QAAA,eACFV,OAAA,CAACL,UAAU;QAACgB,OAAO,EAAC,IAAI;QAAAD,QAAA,EAAEP;MAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,eACNf,OAAA,CAACP,GAAG;MAAAiB,QAAA,eACFV,OAAA,CAACN,IAAI;QACHiB,OAAO,EAAC,UAAU;QAClBK,KAAK,EAAElB,MAAM,CAACM,IAAI,EAAE,KAAK;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACE,EAAA,GAzBWhB,UAA2B;AA2BxCA,UAAU,CAACiB,SAAS,GAAG;EACrBf,KAAK,EAAEN,SAAS,CAACsB,MAAM;EACvBf,IAAI,EAAEP,SAAS,CAACuB,UAAU,CAACf,IAAI;AACjC,CAAC;AAAC,IAAAY,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}